import os
import threading
import time
import chardet

# üîç –ö–ª—é—á–æ–≤—ñ —Å–ª–æ–≤–∞ –¥–ª—è –ø–æ—à—É–∫—É
KEYWORDS = ["error", "warning", "critical"]

# üìÅ –î–∏—Ä–µ–∫—Ç–æ—Ä—ñ—è –∑ —Ñ–∞–π–ª–∞–º–∏ –¥–ª—è –æ–±—Ä–æ–±–∫–∏
TARGET_DIR = r"C:\projects\–î–ó4_–ü–æ–ª–æ–≤—ñ–Ω–∫—ñ–Ω –û–ª–µ–∫—Å—ñ–π"

# üì¶ –°–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—è –¥–ª—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤
lock = threading.Lock()

def process_files_thread(file_list, keywords, results):
    """–û–±—Ä–æ–±–ª—è—î —Å–ø–∏—Å–æ–∫ —Ñ–∞–π–ª—ñ–≤ —É –ø–æ—Ç–æ—Ü—ñ, —à—É–∫–∞—é—á–∏ –∫–ª—é—á–æ–≤—ñ —Å–ª–æ–≤–∞.

    Args:
        file_list: –°–ø–∏—Å–æ–∫ —ñ–º–µ–Ω —Ñ–∞–π–ª—ñ–≤ –¥–ª—è –æ–±—Ä–æ–±–∫–∏.
        keywords: –°–ø–∏—Å–æ–∫ –∫–ª—é—á–æ–≤–∏—Ö —Å–ª—ñ–≤ –¥–ª—è –ø–æ—à—É–∫—É.
        results: –°–ª–æ–≤–Ω–∏–∫ –¥–ª—è –∑–±–µ—Ä—ñ–≥–∞–Ω–Ω—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤ (–∫–ª—é—á: —Å–ª–æ–≤–æ, –∑–Ω–∞—á–µ–Ω–Ω—è: —Å–ø–∏—Å–æ–∫ —à–ª—è—Ö—ñ–≤).
    """
    local_results = {key: [] for key in keywords}

    for filename in file_list:
        file_path = os.path.join(TARGET_DIR, filename)
        try:
            # –°–ø—Ä–æ–±–∞ –≤–∏–∑–Ω–∞—á–∏—Ç–∏ –∫–æ–¥—É–≤–∞–Ω–Ω—è —Ñ–∞–π–ª—É
            with open(file_path, "rb") as f:
                raw_data = f.read()
                detected = chardet.detect(raw_data)
                encoding = detected["encoding"] if detected["encoding"] else "utf-8"

            # –ß–∏—Ç–∞–Ω–Ω—è —Ñ–∞–π–ª—É –∑ –≤–∏–∑–Ω–∞—á–µ–Ω–∏–º –∞–±–æ –∑–∞–ø–∞—Å–Ω–∏–º –∫–æ–¥—É–≤–∞–Ω–Ω—è–º
            try:
                with open(file_path, "r", encoding=encoding) as f:
                    for line in f:
                        line = line.lower()
                        for key in keywords:
                            if key.lower() in line:
                                if file_path not in local_results[key]:
                                    local_results[key].append(file_path)
                                break  # –£–Ω–∏–∫–∞—î–º–æ –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –¥–æ–¥–∞–≤–∞–Ω–Ω—è
            except UnicodeDecodeError:
                # –°–ø—Ä–æ–±–∞ –∑ –∑–∞–ø–∞—Å–Ω–∏–º –∫–æ–¥—É–≤–∞–Ω–Ω—è–º
                with open(file_path, "r", encoding="cp1251") as f:
                    for line in f:
                        line = line.lower()
                        for key in keywords:
                            if key.lower() in line:
                                if file_path not in local_results[key]:
                                    local_results[key].append(file_path)
                                break
        except Exception as e:
            print(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —á–∏—Ç–∞–Ω–Ω—ñ —Ñ–∞–π–ª—É {file_path}: {e}")

    # üîí –î–æ–¥–∞—î–º–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏ –¥–æ –∑–∞–≥–∞–ª—å–Ω–æ–≥–æ —Å–ª–æ–≤–Ω–∏–∫–∞
    with lock:
        for key in keywords:
            results[key].extend(local_results[key])

def main():
    """–û—Å–Ω–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è –¥–ª—è –±–∞–≥–∞—Ç–æ–ø–æ—Ç–æ–∫–æ–≤–æ—ó –æ–±—Ä–æ–±–∫–∏ —Ñ–∞–π–ª—ñ–≤."""
    start_time = time.time()

    # üìÑ –û—Ç—Ä–∏–º—É—î–º–æ —Å–ø–∏—Å–æ–∫ .txt —Ñ–∞–π–ª—ñ–≤
    all_files = [f for f in os.listdir(TARGET_DIR) if f.endswith(".txt")]

    # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞ –Ω–∞—è–≤–Ω—ñ—Å—Ç—å —Ñ–∞–π–ª—ñ–≤
    if not all_files:
        print("–£ –¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ—ó –Ω–µ–º–∞—î .txt —Ñ–∞–π–ª—ñ–≤ –¥–ª—è –æ–±—Ä–æ–±–∫–∏.")
        return

    # üßµ –ö—ñ–ª—å–∫—ñ—Å—Ç—å –ø–æ—Ç–æ–∫—ñ–≤
    num_threads = 4
    chunk_size = len(all_files) // num_threads + 1
    threads = []
    results = {key: [] for key in KEYWORDS}

    for i in range(num_threads):
        file_chunk = all_files[i*chunk_size : (i+1)*chunk_size]
        t = threading.Thread(target=process_files_thread, args=(file_chunk, KEYWORDS, results))
        threads.append(t)
        t.start()

    for t in threads:
        t.join()

    end_time = time.time()

    # üßæ –í–∏–≤–æ–¥–∏–º–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏
    print("–†–µ–∑—É–ª—å—Ç–∞—Ç–∏ –ø–æ—à—É–∫—É (threading):")
    for key, files in results.items():
        print(f"{key}: {files}")

    print(f"\n–ß–∞—Å –≤–∏–∫–æ–Ω–∞–Ω–Ω—è (threading): {end_time - start_time:.2f} —Å–µ–∫—É–Ω–¥")

if __name__ == "__main__":
    main()